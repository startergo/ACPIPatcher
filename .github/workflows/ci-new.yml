name: CI Build (Simplified Multi-Platform)

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
  workflow_call:

jobs:
  # Linux and macOS builds (preserved)
  build-unix:
    name: Build ${{ matrix.os }} (${{ matrix.arch }}, ${{ matrix.build_type }})
    runs-on: ${{ matrix.runner }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: linux
            runner: ubuntu-latest
            arch: X64
            build_type: RELEASE
            toolchain: GCC5
          - os: linux
            runner: ubuntu-latest
            arch: X64
            build_type: DEBUG
            toolchain: GCC5
          - os: linux
            runner: ubuntu-latest
            arch: IA32
            build_type: RELEASE
            toolchain: GCC5
          - os: linux
            runner: ubuntu-latest
            arch: IA32
            build_type: DEBUG
            toolchain: GCC5
          
          # macOS builds
          - os: macos
            runner: macos-13
            arch: X64
            build_type: RELEASE
            toolchain: XCODE5
          - os: macos
            runner: macos-13
            arch: X64
            build_type: DEBUG
            toolchain: XCODE5
          - os: macos
            runner: macos-13
            arch: IA32
            build_type: RELEASE
            toolchain: XCODE5
          - os: macos
            runner: macos-13
            arch: IA32
            build_type: DEBUG
            toolchain: XCODE5

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    # Python Setup
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # NASM Setup (all platforms)
    - name: Setup NASM
      uses: ilammy/setup-nasm@v1

    # macOS Prerequisites
    - name: Setup macOS Build Tools
      if: matrix.os == 'macos'
      run: |
        echo "Setting up macOS build environment..."
        
        # Install Command Line Tools if not present
        xcode-select --install 2>/dev/null || echo "Xcode Command Line Tools already installed"
        
        # Install mtoc using Homebrew (required for XCODE5 builds)
        echo "Installing mtoc..."
        if ! command -v mtoc &> /dev/null; then
          # Try installing mtoc from homebrew
          brew install mtoc 2>/dev/null || {
            echo "mtoc not available via homebrew, installing manually..."
            # Download and install mtoc manually
            curl -L "https://github.com/acidanthera/ocbuild/raw/master/efidirect.tool/mtoc" -o /usr/local/bin/mtoc
            chmod +x /usr/local/bin/mtoc
          }
        fi
        
        # Verify mtoc installation
        if command -v mtoc &> /dev/null; then
          echo "✓ mtoc found: $(which mtoc)"
          mtoc --version 2>/dev/null || echo "mtoc installed (version info not available)"
        else
          echo "WARNING: mtoc not found - XCODE5 builds may fail"
          echo "Using alternative toolchain configuration..."
        fi
        
        # Install NASM for macOS builds
        if ! command -v nasm &> /dev/null; then
          echo "Installing NASM via Homebrew..."
          brew install nasm
        fi
        
        echo "✓ macOS build tools setup completed"
      shell: bash

    # Build Essentials (Linux only)
    - name: Install Build Essentials
      if: matrix.os == 'linux'
      run: |
        echo "Installing build-essential package..."
        sudo apt-get update
        sudo apt-get install -y build-essential
      shell: bash

    # Linux Prerequisites (EDK2 build requirements)
    - name: Setup Linux Build Tools (EDK2 Requirements)
      if: matrix.os == 'linux'
      run: |
        echo "Installing EDK2 build prerequisites for Linux..."
        
        # Update package list
        sudo apt-get update
        
        # Install essential EDK2 build tools as per TianoCore documentation
        sudo apt-get install -y \
          build-essential \
          uuid-dev \
          iasl \
          git \
          nasm \
          python-is-python3 \
          acpica-tools
        
        # Verify critical tools are installed
        echo "Verifying installed tools..."
        iasl -v || echo "WARNING: iasl not properly installed"
        nasm -v || echo "WARNING: nasm not properly installed"
        gcc --version | head -n1
        make --version | head -n1
        python3 --version
        
        echo "✓ Linux EDK2 build prerequisites installed"
      shell: bash

    # Build with Traditional EDK2 (Linux/macOS)
    - name: Build with EDK2 (Linux/macOS)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true
      run: |
        echo "Building ACPIPatcher with simplified build system..."
        echo "Configuration: ${{ matrix.arch }} ${{ matrix.build_type }} (${{ matrix.toolchain }})"
        
        # Run our automated setup and build script with parameters
        chmod +x setup_and_build.sh
        ./setup_and_build.sh ${{ matrix.arch }} ${{ matrix.build_type }}
        
        echo "✅ Build completed successfully"
      shell: bash

    # Upload Artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ACPIPatcher-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.toolchain }}
        path: |
          *.efi
        retention-days: 30

    # Verify Build Success (Linux/macOS)
    - name: Verify Build Output (Linux/macOS)
      run: |
        echo "Checking build outputs..."
        if [ -f "ACPIPatcher.efi" ]; then
          echo "✅ ACPIPatcher.efi found ($(stat -f%z ACPIPatcher.efi 2>/dev/null || stat -c%s ACPIPatcher.efi) bytes)"
        else
          echo "❌ ACPIPatcher.efi not found"
        fi
        
        if [ -f "ACPIPatcherDxe.efi" ]; then
          echo "✅ ACPIPatcherDxe.efi found ($(stat -f%z ACPIPatcherDxe.efi 2>/dev/null || stat -c%s ACPIPatcherDxe.efi) bytes)"
        else
          echo "❌ ACPIPatcherDxe.efi not found"
        fi
        
        echo "Build verification completed"
      shell: bash

  # Windows builds
  build-windows:
    name: Build Windows (${{ matrix.arch }}, ${{ matrix.target }})
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [X64, IA32]
        target: [RELEASE, DEBUG]
    
    steps:
      - name: Checkout ACPIPatcher Repository
        uses: actions/checkout@v4
        
      - name: Checkout EDK2 Repository
        uses: actions/checkout@v4
        with:
          repository: tianocore/edk2
          path: edk2
          submodules: true
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install EDK2 Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install edk2-pytool-library edk2-pytool-extensions regex
        shell: pwsh
        
      - name: Setup Visual Studio
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '17.0'
          
      - name: Install NASM
        run: |
          # Download and install NASM
          $nasmUrl = "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip"
          $nasmZip = "$env:TEMP\nasm.zip"
          $nasmDir = "C:\NASM"
          
          Write-Host "Downloading NASM..."
          Invoke-WebRequest -Uri $nasmUrl -OutFile $nasmZip
          
          Write-Host "Extracting NASM..."
          Expand-Archive -Path $nasmZip -DestinationPath $env:TEMP
          
          Write-Host "Installing NASM to C:\NASM..."
          New-Item -ItemType Directory -Path $nasmDir -Force
          Copy-Item -Path "$env:TEMP\nasm-2.16.01\*" -Destination $nasmDir -Recurse -Force
          
          Write-Host "Adding NASM to PATH..."
          echo "C:\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh
          
      - name: Build BaseTools
        run: |
          cd edk2
          echo "Setting up Visual Studio environment..."
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.arch == 'IA32' && '32' || '64' }}.bat"
          
          echo "Setting up Python environment..."
          where python
          set "PYTHON_COMMAND=python"
          python --version
          
          echo "Setting EDK2 environment variables..."
          set "WORKSPACE=%CD%"
          set "EDK_TOOLS_PATH=%CD%\BaseTools"
          set "BASE_TOOLS_PATH=%CD%\BaseTools"
          
          echo "Building BaseTools with Edk2ToolsBuild..."
          cd BaseTools
          python Edk2ToolsBuild.py
          
          if %ERRORLEVEL% neq 0 (
            echo "ERROR: BaseTools build failed"
            exit /b 1
          )
          
          echo "BaseTools build completed successfully"
          cd %WORKSPACE%
        shell: cmd
          
      - name: Build ACPIPatcher (${{ matrix.arch }}, ${{ matrix.target }})
        run: |
          cd edk2
          echo "Setting up EDK2 environment..."
          call edksetup.bat
          
          echo "Setting up packages path..."
          set "PACKAGES_PATH=%CD%;%GITHUB_WORKSPACE%"
          
          echo "Verifying ACPIPatcherPkg is available..."
          if exist "%GITHUB_WORKSPACE%\ACPIPatcherPkg\ACPIPatcherPkg.dsc" (
            echo "SUCCESS: ACPIPatcherPkg.dsc found"
            echo "Building ACPIPatcher for ${{ matrix.arch }} ${{ matrix.target }}..."
            build -a ${{ matrix.arch }} -t VS2022 -b ${{ matrix.target }} -p %GITHUB_WORKSPACE%\ACPIPatcherPkg\ACPIPatcherPkg.dsc
            echo "ACPIPatcher build completed!"
          ) else (
            echo "ERROR: ACPIPatcherPkg.dsc not found!"
            dir "%GITHUB_WORKSPACE%\ACPIPatcherPkg"
            exit /b 1
          )
        shell: cmd
          
      - name: Copy Artifacts
        run: |
          $buildDir = "edk2\Build\ACPIPatcher\${{ matrix.target }}_VS2022\${{ matrix.arch }}"
          if (Test-Path "$buildDir\ACPIPatcher.efi") {
            Copy-Item "$buildDir\ACPIPatcher.efi" "ACPIPatcher-${{ matrix.arch }}-${{ matrix.target }}.efi"
            Write-Host "✅ Copied ACPIPatcher.efi"
          }
          if (Test-Path "$buildDir\ACPIPatcherDxe.efi") {
            Copy-Item "$buildDir\ACPIPatcherDxe.efi" "ACPIPatcherDxe-${{ matrix.arch }}-${{ matrix.target }}.efi"
            Write-Host "✅ Copied ACPIPatcherDxe.efi"
          }
          Get-ChildItem "*.efi" | ForEach-Object { Write-Host "📦 Artifact: $($_.Name)" }
        shell: pwsh
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ACPIPatcher-Windows-${{ matrix.arch }}-${{ matrix.target }}
          path: |
            *.efi
            edk2/Build/ACPIPatcher/**/*.txt
          retention-days: 30
