name: Release ACPIPatcher

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: true
        default: 'v1.1.0'

jobs:
  build:
    name: Build Release Artifacts
    uses: ./.github/workflows/ci-new.yml

  upload-release-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download Release Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare Release Assets
      run: |
        mkdir release-assets
        
        # Look for .efi files (the actual build artifacts)
        find artifacts -name "*.efi" | while read file; do
          # Extract artifact name and rename descriptively
          artifact_dir=$(dirname "$file")
          artifact_name=$(basename "$artifact_dir")
          filename=$(basename "$file")
          
          # Create descriptive filename from artifact directory name
          # Example: ACPIPatcher-Windows-X64-Release-VS2022 -> ACPIPatcher-Windows-X64-Release.efi
          new_name=$(echo "$artifact_name" | sed 's/-VS2022$//' | sed 's/ACPIPatcher-/ACPIPatcher-/')
          cp "$file" "release-assets/${new_name}-${filename}"
        done
        
        # Also look for any compressed archives (backward compatibility)
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          echo "Found archive: $file"
          cp "$file" release-assets/
        done
        
        # List what we're uploading
        echo "Release assets prepared:"
        ls -la release-assets/
        
        # Show artifact structure for debugging
        echo "Available artifacts:"
        find artifacts -type f -name "*.efi" -o -name "*.tar.gz" -o -name "*.zip"
    
    - name: Upload Assets to Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag_name }}
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
