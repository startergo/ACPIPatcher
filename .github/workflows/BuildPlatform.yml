# @file BuildPlatform.yml
#
# A reusable workflow that builds an EDKII platform on Windows and uploads artifacts.
# Adapted for ACPIPatcher project from Microsoft's EDKII template.
#
##
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

name: Build Platform (Windows)

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        description: 'The version of Python to use for the job'
        type: string
        default: '3.12'
      build-file:
        required: false
        description: 'The path to the stuart build script'
        type: string
        default: 'ACPIPatcherPkg/ACPIPatcherPkg.py'
      tool-chain:
        required: false
        description: 'The tool chain to use for the build'
        type: string
        default: 'VS2022'
      target:
        required: false
        description: 'The target to build'
        type: string
        default: 'RELEASE'
      arch:
        required: false
        description: 'The architecture to build'
        type: string
        default: 'X64'
      extra-build-args:
        required: false
        description: 'Extra arguments to pass to the build script'
        type: string
        default: ''
      extra-pip-requirements:
        required: false
        description: 'Extra pip requirements to install'
        type: string
        default: 'edk2-pytool-library edk2-pytool-extensions'
      extra-setup-cmd:
        required: false
        description: 'Extra setup commands to run'
        type: string
        default: ''

jobs:
  build:
    name: Build Windows Platform (${{ inputs.arch }}, ${{ inputs.target }})
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false  # We'll handle EDK2 submodules manually for better control

      - name: Configure Git for submodules
        run: |
          git config --global submodule.recurse true
          git config --global submodule.fetchJobs 4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Setup NASM
        uses: ilammy/setup-nasm@v1

      - name: Setup Visual Studio Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ inputs.arch == 'IA32' && 'x86' || 'x64' }}

      - name: 'Install/Upgrade pip modules and setup venv'
        run: |
          pip install --upgrade pip
          pip install virtualenv
          python -m venv .venv
          .venv\Scripts\activate
          if (Test-Path "requirements.txt") {
            Write-Host "Installing from requirements.txt..."
            pip install -r requirements.txt
          } else {
            Write-Host "Installing default Stuart packages..."
            pip install ${{ inputs.extra-pip-requirements }}
          }
          # Ensure regex is installed for EDK2 plugins
          pip install regex
          Write-Host "Installed packages:"
          pip list
        if: ${{ inputs.extra-pip-requirements != '' }}

      - name: 'Extra Setup Commands'
        run: ${{ inputs.extra-setup-cmd }}
        if: ${{ inputs.extra-setup-cmd != '' }}

      - name: Setup EDK II (Required for all builds)
        shell: cmd
        run: |
          echo "Setting up EDK II environment..."
          if not exist edk2 (
            echo "Cloning EDK2..."
            git clone --depth 1 --recurse-submodules=MdePkg/Library/MipiSysTLib --recurse-submodules=BaseTools/Source/C/BrotliCompress --recurse-submodules=CryptoPkg/Library/OpensslLib/openssl https://github.com/tianocore/edk2.git edk2
          ) else (
            echo "EDK2 already exists, updating submodules..."
            cd edk2
            git submodule update --init --depth 1 MdePkg/Library/MipiSysTLib
            git submodule update --init --depth 1 BaseTools/Source/C/BrotliCompress
            git submodule update --init --depth 1 CryptoPkg/Library/OpensslLib/openssl
            cd ..
          )
          echo "Setting up EDK2 environment..."
          cd edk2
          call edksetup.bat
          cd ..
          echo "EDK2 setup completed successfully"

      - name: 'Clone Submodules (Stuart)'
        run: |
          echo "Checking Stuart configuration..."
          if (Test-Path "${{ inputs.build-file }}") {
            Write-Host "Found Stuart configuration at ${{ inputs.build-file }}"
            .venv\Scripts\activate
            Write-Host "Virtual environment activated, checking installed packages..."
            pip list | findstr -i "regex edk2"
            Write-Host "Running stuart_setup..."
            stuart_setup -c ${{ inputs.build-file }} --verbose
            if ($LASTEXITCODE -ne 0) {
              Write-Host "Stuart setup failed with exit code $LASTEXITCODE, but continuing with workflow..."
            } else {
              Write-Host "Stuart setup completed successfully"
            }
          } else {
            Write-Host "Stuart configuration not found at ${{ inputs.build-file }}, skipping..."
          }
        continue-on-error: true

      - name: 'Download External Dependencies (Stuart)'
        run: |
          .venv\Scripts\activate
          stuart_update -c ${{ inputs.build-file }}
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Stuart update failed with exit code $LASTEXITCODE, but continuing..."
          }
        continue-on-error: true

      - name: 'Build BaseTools (Stuart - Modern Method)'
        run: |
          .venv\Scripts\activate
          echo "Building BaseTools with modern Edk2ToolsBuild.py..."
          python edk2/BaseTools/Edk2ToolsBuild.py -t ${{ inputs.tool-chain }}
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Modern BaseTools build failed, will use traditional method in fallback"
          } else {
            Write-Host "Modern BaseTools build completed successfully"
          }
        continue-on-error: true

      - name: 'Build Platform (Stuart)'
        run: |
          .venv\Scripts\activate
          stuart_build -c ${{ inputs.build-file }} TARGET=${{ inputs.target}} TOOL_CHAIN_TAG=${{ inputs.tool-chain }} TARGET_ARCH=${{ inputs.arch }} ${{ inputs.extra-build-args }}
        continue-on-error: true

      - name: Fallback Build (Traditional EDK2)
        shell: cmd
        run: |
          echo "Using simplified build script..."
          echo "Ensuring BaseTools are built for fallback..."
          cd edk2
          call edksetup.bat ForceRebuild
          cd ..
          call build-windows.bat ${{ inputs.arch }} ${{ inputs.target }}
        continue-on-error: false

      - name: Copy artifacts from EDK2 build
        shell: cmd
        run: |
          echo "Copying build artifacts..."
          set "BUILD_DIR=edk2\Build\ACPIPatcher\${{ inputs.target }}_${{ inputs.tool-chain }}\${{ inputs.arch }}"
          if exist "%BUILD_DIR%\ACPIPatcher.efi" copy "%BUILD_DIR%\ACPIPatcher.efi" .
          if exist "%BUILD_DIR%\ACPIPatcherDxe.efi" copy "%BUILD_DIR%\ACPIPatcherDxe.efi" .
          dir *.efi
        continue-on-error: true

      - name: Upload Platform Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ACPIPatcher-Windows-${{ inputs.arch }}-${{ inputs.target }}-${{ inputs.tool-chain }}
          path: |
            Build/**/*.txt
            BaseTools/BaseToolsBuild/**/*
            edk2/Build/**/*.txt
            *.efi
        if: always()
